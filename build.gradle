plugins {
    id 'application'
}

def javaVersion = 17

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(javaVersion)
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation files('lib/jipv6.jar')
  // https://mvnrepository.com/artifact/com.github.cliftonlabs/json-simple
  implementation 'com.github.cliftonlabs:json-simple:4.0.1'
  // https://mvnrepository.com/artifact/de.sciss/syntaxpane
  implementation 'de.sciss:syntaxpane:1.2.1'
  // https://mvnrepository.com/artifact/info.picocli/picocli
  implementation 'info.picocli:picocli:4.7.0'
  // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
  implementation 'org.apache.logging.log4j:log4j-core:2.19.0'
  // https://mvnrepository.com/artifact/org.jdom/jdom-legacy
  implementation 'org.jdom:jdom-legacy:1.1.3'
  // https://mvnrepository.com/artifact/org.jfree/jfreechart
  implementation 'org.jfree:jfreechart:1.5.3'
  // https://mvnrepository.com/artifact/org.openjdk.nashorn/nashorn-core
  implementation 'org.openjdk.nashorn:nashorn-core:15.4'
  // https://mvnrepository.com/artifact/org.swinglabs.swingx/swingx-autocomplete
  implementation 'org.swinglabs.swingx:swingx-autocomplete:1.6.5-1'
}


// FIXME: add test resources.
sourceSets {
  corecomm {
    resources {
      srcDirs = ['java/org/contikios/cooja/corecomm']
    }
  }
  data {
    resources {
      srcDirs = ['tools/coffee-manager']
      include '*.properties'
    }
  }
  main {
    java {
      srcDirs = ['java', 'tools/coffee-manager']
      exclude 'org/contikios/cooja/corecomm/CoreCommTemplate.java'
    }
    resources {
      srcDirs = [corecomm.resources, data.resources, 'config', 'images']
    }
  }
}

application {
  mainClass = 'org.contikios.cooja.Main'
  applicationDefaultJvmArgs = ['-Xms400M', '-Xmx2048M',
    // Several Contiki-NG tests crash the JVM without these flags with Java 17,
    // 08-ipv6-unicast.csc is one example. Unclear why, the JVM should not
    // do anything with the pointers in C-land part of ContikiMoteType.
    '-XX:-UseCompressedOops', '-XX:-UseCompressedClassPointers',
    // Enable the experimental foreign function interface in Java 17.
    '--enable-native-access', 'ALL-UNNAMED', '--add-modules', 'jdk.incubator.foreign']
}

tasks.withType(JavaCompile) {
  options.compilerArgs += ['--add-modules', 'jdk.incubator.foreign']
}

jar {
  reproducibleFileOrder = true
  manifest {
    // Set Multi-Release to true to ensure the JVM uses the right class from log4j.
    attributes 'Main-Class': 'org.contikios.cooja.Main',
      'Class-Path': '. ' + configurations.runtimeClasspath.files.collect { "lib/" + it.getName() }.join(' '),
      'Multi-Release': 'true'
  }
//  copy {
//    from file("lib")
//    into file("build/libs")
//    include('*.jar')
//  }
}

tasks.register('fullJar', Jar) {
  archiveClassifier = 'full'
  reproducibleFileOrder = true
  manifest {
    attributes 'Main-Class': 'org.contikios.cooja.Main',
      'Class-Path': '. ' + configurations.runtimeClasspath.files.collect { "lib/" + it.getName() }.join(' '),
      'Multi-Release': 'true'
  }

  from sourceSets.main.output

  duplicatesStrategy = 'exclude'
  dependsOn configurations.runtimeClasspath
  from {
    configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
  }
}

run {
  // Bad Cooja location detected with gradle run, explicitly pass -cooja.
  doFirst {
    args += ['-cooja', "$projectDir",
             '-javac', javaToolchains.compilerFor {
                         languageVersion = JavaLanguageVersion.of(javaVersion)
                       }.get().executablePath]
  }
  // Pass all command line "-Dcooja.k=v" as "-Dk=v" to Cooja.
  System.properties.each { k,v ->
    if (k.startsWith("cooja.")) {
      systemProperty k - "cooja.", v
    }
  }
  systemProperty 'picocli.disable.closures', "true"
  // Enable assertions with "-Passertions".
  enableAssertions = project.hasProperty('assertions')
}
