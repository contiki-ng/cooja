plugins {
  id 'application'
  id 'jvm-test-suite'
  id 'com.diffplug.spotless' version '6.25.0'
  id 'net.ltgt.errorprone' version '3.1.0'
}

group = 'org.contikios.cooja'

def javaVersion = 21

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(javaVersion)
  }
}

spotless {
  java {
    toggleOffOn()
    // FIXME: gives unclosed string literal in ScriptRunner.java with spotless 6.23.3.
    // removeUnusedImports()
    importOrder()
    // trimTrailingWhitespace()
    // cleanthat()
    // formatAnnotations()

    // Use a different clang-format binary with -PclangFormat=clang-format-15.
    // FIXME: make clang-format default in the future
    // def clangFormatBinary = (String) project.findProperty('clangFormat') ?: 'clang-format'
    def clangFormatBinary = (String) project.findProperty('clangFormat')
    if (clangFormatBinary) {
      try {
        def clangOutput = new ByteArrayOutputStream()
        exec {
          commandLine clangFormatBinary, '--version'
          standardOutput = clangOutput
        }
        def clangVersion = (String) (clangOutput.toString() =~ /\d+\.\d+\.\d+/)[0]
        clangFormat(clangVersion).pathToExe(clangFormatBinary).style('file')
      } catch (IndexOutOfBoundsException ignored) {
        logger.warn("Failed to parse version when running '{} --version'", clangFormatBinary)
      } catch (Exception e) {
        logger.warn("Failed to run '{} --version': {}", clangFormatBinary, e.getMessage())
      }
    }
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation files('lib/jipv6.jar')
  // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
  implementation 'ch.qos.logback:logback-classic:1.5.0'
  // https://mvnrepository.com/artifact/com.github.cliftonlabs/json-simple
  implementation 'com.github.cliftonlabs:json-simple:4.0.1'
  // https://mvnrepository.com/artifact/com.formdev/flatlaf
  implementation 'com.formdev:flatlaf:3.3'
  // https://mvnrepository.com/artifact/de.sciss/syntaxpane
  implementation 'de.sciss:syntaxpane:1.3.0'
  // https://mvnrepository.com/artifact/info.picocli/picocli
  implementation 'info.picocli:picocli:4.7.5'
  // https://mvnrepository.com/artifact/info.picocli/picocli-codegen
  annotationProcessor 'info.picocli:picocli-codegen:4.7.5'
  // https://mvnrepository.com/artifact/org.jdom/jdom2
  implementation 'org.jdom:jdom2:2.0.6.1'
  // https://mvnrepository.com/artifact/org.jfree/jfreechart
  implementation 'org.jfree:jfreechart:1.5.4'
  // https://mvnrepository.com/artifact/org.openjdk.nashorn/nashorn-core
  implementation 'org.openjdk.nashorn:nashorn-core:15.4'
  // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
  implementation 'org.slf4j:slf4j-api:2.0.12'
  // https://mvnrepository.com/artifact/org.swinglabs.swingx/swingx-autocomplete
  implementation 'org.swinglabs.swingx:swingx-autocomplete:1.6.5-1'
  errorprone("com.google.errorprone:error_prone_core:2.24.1")
}


// FIXME: add test resources.
sourceSets {
  data {
    resources {
      srcDirs = ['tools/coffee-manager']
      include '*.properties'
    }
  }
  main {
    java {
      srcDirs = ['java', 'tools/coffee-manager']
    }
    resources {
      srcDirs = [data.resources, 'config']
    }
  }
}

application {
  mainClass = 'org.contikios.cooja.Main'
  applicationDefaultJvmArgs = ['-Xms400M', '-Xmx2048M',
    // Several Contiki-NG tests crash the JVM without these flags with Java 17,
    // 08-ipv6-unicast.csc is one example. Unclear why, the JVM should not
    // do anything with the pointers in C-land part of ContikiMoteType.
    '-XX:-UseCompressedOops', '-XX:-UseCompressedClassPointers',
    // Enable the preview foreign function interface.
    '--enable-preview', '--enable-native-access', 'ALL-UNNAMED']
}

testing {
  suites {
    configureEach {
      dependencies {
        implementation project()
        // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
        implementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
        runtimeOnly 'org.junit.platform:junit-platform-launcher'
      }
    }
    test(JvmTestSuite) {
      useJUnitJupiter()
      testType = TestSuiteType.INTEGRATION_TEST
    }
  }
}

test {
  reports {
    junitXml {
      outputPerTestCase = true
      mergeReruns = true
    }
  }
  testLogging {
    events "failed", "passed", "skipped"
  }
}

tasks.withType(JavaCompile).configureEach {
  // ErrorProne is slow, only enable with ./gradlew build -Perrorprone.
  options.errorprone.enabled = project.hasProperty('errorprone')
  // Uncomment the next two lines and the disable line to generate a patch.
  //options.errorprone.errorproneArgs = ['-XepPatchChecks:MissingOverride',
  //   '-XepPatchLocation:' + buildscript.sourceFile.getParent()]
  options.errorprone.disable('AnnotateFormatMethod')
  options.errorprone.disable('ByteBufferBackingArray')
  options.errorprone.disable('CatchAndPrintStackTrace')
  options.errorprone.disable('DefaultCharset')
  options.errorprone.disable('DoubleCheckedLocking')
  options.errorprone.disable('EmptyBlockTag')
  options.errorprone.disable('EmptyCatch')
  options.errorprone.disable('EqualsGetClass')
  options.errorprone.disable('EqualsHashCode')
  options.errorprone.disable('EqualsUnsafeCast')
  options.errorprone.disable('ErroneousBitwiseExpression')
  options.errorprone.disable('FallThrough')
  options.errorprone.disable('FloatingPointLiteralPrecision')
  options.errorprone.disable('HidingField')
  options.errorprone.disable('ImmutableEnumChecker')
  options.errorprone.disable('InconsistentCapitalization')
  options.errorprone.disable('InlineMeSuggester')
  options.errorprone.disable('JavaUtilDate')
  options.errorprone.disable('JdkObsolete')
  options.errorprone.disable('MissingCasesInEnumSwitch')
  options.errorprone.disable('MissingSummary')
  options.errorprone.disable('MutablePublicArray')
  options.errorprone.disable('NarrowingCompoundAssignment')
  options.errorprone.disable('NonApiType')
  options.errorprone.disable('OperatorPrecedence')
  options.errorprone.disable('ReferenceEquality')
  options.errorprone.disable('StaticAssignmentInConstructor')
  options.errorprone.disable('StringSplitter')
  options.errorprone.disable('ThreadPriorityCheck')
  options.errorprone.disable('UnusedMethod')
  options.errorprone.disable('UnusedVariable')
  options.compilerArgs += ['-Werror', '--enable-preview',
                           "-Aproject=${project.group}/${project.name}"]
}

tasks.withType(AbstractArchiveTask).configureEach {
  preserveFileTimestamps = false
  reproducibleFileOrder = true
}

tasks.register('copyDependencies', Copy) {
  def dir = layout.buildDirectory.dir("libs/lib")
  description = "Copy jar dependencies into ${dir.get()}"
  group = "Build"
  from configurations.runtimeClasspath.files
  into dir
}

// Run Cooja with: java <JVM parameters> -jar build/libs/cooja.jar <Cooja parameters>
jar {
  dependsOn copyDependencies
  manifest {
    attributes 'Main-Class': 'org.contikios.cooja.Main',
      'Class-Path': '. ' + configurations.runtimeClasspath.files.collect { "lib/" + it.getName() }.join(' ')
  }
}

tasks.register('fullJar', Jar) {
  description = "Assembles a jar that contains all dependencies."
  group = "Build"
  archiveClassifier.set('full')
  manifest {
    attributes 'Main-Class': 'org.contikios.cooja.Main',
      'Class-Path': '. ' + configurations.runtimeClasspath.files.collect { "lib/" + it.getName() }.join(' ')
  }

  from sourceSets.main.output

  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  dependsOn configurations.runtimeClasspath
  from {
    configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
  }
}

// Make startScripts use the fullJar and application settings.
tasks.named("startScripts") {
  mainClass = application.mainClass
  defaultJvmOpts = application.applicationDefaultJvmArgs
  classpath = fullJar.outputs.files
  doLast {
    delete windowsScript
  }
}

distributions {
  main {
    // Exclude default libraries and include fullJar instead.
    contents {
      exclude { FileTreeElement details ->
        details.file.name.endsWith('.jar') && !details.file.name.contains('cooja-full')
      }
      into('lib') {
        from fullJar
      }
    }
  }
}

run {
  // Bad Cooja location detected with gradle run, explicitly pass -cooja.
  doFirst {
    args += ['--cooja', "$projectDir"]
  }
  // Connect stdin to make the MSPSim CLI work, except when running in CI.
  if (System.getenv('CI') == null) {
    standardInput = System.in
  }
  // Pass all command line "-Dcooja.k=v" as "-Dk=v" to Cooja.
  System.properties.each { k,v ->
    if (k.startsWith("cooja.")) {
      systemProperty k - "cooja.", v
    }
  }
  systemProperty 'picocli.disable.closures', "true"
  // Enable assertions with "-Passertions".
  enableAssertions = project.hasProperty('assertions')
  // Prevent Gradle from changing directory to tools/cooja.
  workingDir = System.getProperty("user.dir")
}
